---
interface Props {
  src: any;
}

const { src } = Astro.props;
const images = [];
if(src.length>1) {
  images.push(src[src.length-1]);
  images.push(...src);
  const [first = ''] = src;
  images.push(first);
}
const style = {
  width: `${images.length}00%`
}


---

<div class="focus">
  <ul class="picture" style={style}>
    {
      images.map((item) => (
        <li><img src={item}/></li>
      ))
    }
  </ul>
  <div class="absolute bottom-8 left-8 text-[3rem] num text-white">1/{src.length}</div>
  <div class:list={["next-button absolute mobile:hidden right-8 w-[3.625rem] bottom-8 z-30 cursor-pointer h-[3.5rem]", {hidden: src.length<=1}]}></div>
</div>
<script>
  window.addEventListener('load', function() {
    const focus = document.getElementsByClassName('focus');
    for(let i = 0; i<focus.length; i++) {
      const el = focus[i] as HTMLElement;
      const w = el.offsetWidth;
      const ul = el.querySelector('.picture') as HTMLElement;
      const text = el.querySelector('.num') as HTMLElement;
      const button = el.querySelector('.next-button') as HTMLElement;

      let index = 0;
      //无缝滚动，且去掉过渡效果
      ul.addEventListener('transitionend', function() {
        if (index >= ul.children.length - 2) {
          index = 0;
          ul.style.transition = 'none';
          ul.style.transform = `translateX(${-index * w}px)`;
        } else if(index < 0) {
          index = ul.children.length - 3;
          ul.style.transition = 'none';
          ul.style.transform = `translateX(${-index * w}px)`;
        }
        text.innerText = `${index+1}/${ul.children.length - 2}`
      })
      button.addEventListener('click', function () {
        if(index<ul.children.length - 2) {
          index++;
        }else {
          index = 0;
        }
        ul.style.transition = 'all .3s';
        ul.style.transform = `translateX(${-index * w}px)`;
      })
      //手指滑动轮播图
      let startX = 0;
      let moveX = 0;
      let flag = false;
      ul.addEventListener('touchstart', function(e) {
        startX = e.targetTouches[0].pageX;
      })
      ul.addEventListener('touchmove', function(e) {
        moveX = e.targetTouches[0].pageX - startX;
        //手指拖动的时候不需要动画效果，所以取消过渡效果
        ul.style.transition = 'none';
        ul.style.transform = `translateX(${-index * w + moveX}px)`;
        flag = true;
        e.preventDefault();
      })
      ul.addEventListener('touchend', function() {
        //回弹效果，滑动距离大于70px才会切换下一张
        if (!flag) {
          return;
        }
        if (Math.abs(moveX) > 70) {
          if (moveX > 0) {
              index--;
          } else {
              index++;
          }
        }
        ul.style.transition = 'all .3s';
        ul.style.transform = `translateX(${-index * w}px)`;
      })
    }
  })
</script>
<style>
.focus {
  position: relative;
  width: 100%;
  overflow-x: hidden;
}
.picture {
  position: relative;
  top: 0;
  left: -100%;
  display: flex;
}
.picture li {
  flex: 1;
  list-style: none;
}
.picture img {
  width: 100%;
  height: auto;
}
.next-button {
  background-image: url(../assets/images/next.png);
  background-size: 100% auto;
}
</style>
